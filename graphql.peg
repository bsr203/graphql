{
package parser
}

Document ← Statement+

Statement ← Operation / FragmentDefinition / TypeDefinition / TypeExtension / EnumDefinition / Comment

Comment ← '#' [^\n]*

Operation ← Selections /
            (OperationType _ OperationName _ VariableDefinitions? _ Directives? _ Selections)

OperationType ← "query" / "mutation"
OperationName ← Name
VariableDefinitions ← '(' VariableDefinition+ ')'
VariableDefinition ← _ Variable _ ':' _ Type _ DefaultValue? _
DefaultValue ← '=' Value

Selections ← '{' Selection+ '}'
Selection ← _ Field _ / _ FragmentSpread _

Field ← FieldAlias? _ FieldName _ Arguments? _ Directives? _ Selections?
FieldAlias ← Name ':'
FieldName ← Name
Arguments ← '(' Argument* ')'
Argument ← _ ArgumentName _ ':' _ Value _
ArgumentName ← Name

Name ← [a-z_]i [0-9a-z_]i*

FragmentSpread ←  "..." FragmentName Directives?
FragmentDefinition ← "fragment" Type FragmentName Directives? Selections
FragmentName ← Name

Value ← _ (Null / Boolean / Int / Float / String / Array / Object / Variable) _
// TODO(tmc) Value_variable, Value_qualifyEnum

Null ← "null"
Boolean ← "true" / "false"
Int ← Sign? IntegerPart
Float ← Sign? IntegerPart '.' Digit+ ExponentPart?
Sign ← '-'
IntegerPart ← '0' / NonZeroDigit Digit*
ExponentPart ← 'e' Sign? Digit+
Digit ← [0-9]
NonZeroDigit ← [123456789]
String ← '"' StringCharacter* '"'
StringCharacter ← [^\\"] / '\\' EscapedCharacter / '\\' EscapedUnicode
EscapedUnicode ← 'u' [0-9a-f]i [0-9a-f]i [0-9a-f]i [0-9a-f]i
EscapedCharacter ← ["/bfnrt] / '\\'
 
Array ← '[' Value* ']'
Object ← '{' Property+ '}'

Variable ← VariableName
// TODO(tmc): the above should be: Variable ← VariableName / VariablePropertySelection
VariableName ← '$' [0-9a-z_]i+
VariablePropertySelection ← Variable '.' PropertyName

Property ← PropertyName ':' Value
PropertyName ← Name

Directives ← Directive+
Directive ← _ '@' (DirectiveName ':' _ Value /
	               DirectiveName ':' _ Type /
                   DirectiveName) _
DirectiveName ← Name

Type ← OptionalType / GenericType
OptionalType ← GenericType?
GenericType ← TypeName TypeParams?
TypeParams ← ':' '<' Type+ '>'
TypeName ← Name
TypeDefinition ← "type" _ TypeName _ Interfaces? _ '{' FieldDefinition+ '}'
TypeExtension ← "extend" _ TypeName _ Interfaces? _ '{' FieldDefinition+ '}'
Interfaces ← GenericType+
FieldDefinition ← _ FieldName _ ArgumentDefinitions? _ ':' _ Type _
ArgumentDefinitions ← '(' ArgumentDefinition+ ')'
ArgumentDefinition ← _ ArgumentName _ ':' _ Type _ DefaultValue? _
EnumDefinition ← "enum" TypeName '{' EnumValueName+ '}'
EnumValueName ← Name

_ "ignored" ← (whitespace / Comment / ',')*
whitespace ← [ \n\t\r]+

EOF ← !.
